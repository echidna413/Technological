using System.Collections.Generic;

namespace TestDataGridViewValidating
{
    class Rules
    {
        public static readonly int[] REQUIRED_ALWAYS_181 = { 1, 2, 3, 4, 28, 29, 33, 48, 72, 73, 77, 92, 116, 117 };
        public static readonly int[] SURFACE_FIELDS_182 = { 4, 48, 92, 118, 146 };
        public static readonly int SURFACE_FIELDS_TO_CHECK_COUNT_182 = 22;
        // { surfaceCode => mask }
        public static readonly Dictionary<int, string> SURFACES_182 = new Dictionary<int, string> {
            {111, "1100110000000000000000"}, {121, "1100110000000000000000"}, {221, "1111110000110000000000"},
            {211, "1111110000110000000000"}, {311, "1100110000000000000000"}, {543, "0000111100110000000000"},
            {131, "1111110000000000000000"}, {411, "1111110000000000000000"}, {421, "1111000000000000000000"},
            {542, "1100111111110000000000"}, {521, "0000111100110000000000"}, {532, "1111111111110000000000"},
            {512, "0000110011110000000000"}, {651, "1100110000000000000000"}, {611, "1100110000000000000000"},
            {9321, "1111110000000000000000"}, {9114, "1100110000111111000000"}, {9113, "1111110000110000000011"},
            {9312, "1111000000110000000011"}, {9112, "1100110000110000000011"}, {9111, "1100110000000000000000"},
            {9221, "1111110000110000000000"}, {9532, "1100111111110000000000"}, {9521, "0000111100110000000000"},
            {9611, "1100110000000000000000"}, {9211, "1111110000110000000000"}, {9121, "1100110000000000000000"}
        };
        public static readonly int[] SURFACES = { 92, 118, 146 };
        public static readonly int[] REQUIRED_2_SURFACES_1851 = { 118, 142, 143, 144, 145 };
        public static readonly int[] REQUIRED_3_SURFACES_1852 = { 146, 170, 171, 172, 173, 174, 175 };
        public static readonly int[] INTEGER_TYPE_21 = { 1, 2, 3, 4, 27, 28, 48, 71, 72, 92, 115, 118, 141, 146, 169 };
        // { startPos, endPos, startValue (include), endValue (exclude) }
        public static readonly int[][] RANGE_23 =
        {
            new int[] { 5,   14,  0, 100000 },
            new int[] { 15,  20,  0, 360 },
            new int[] { 21,  26,  0, 100000 },
            new int[] { 49,  58,  0, 100000 },
            new int[] { 59,  64,  0, 360 },
            new int[] { 65,  70,  0, 100000 },
            new int[] { 93,  102, 0, 100000 },
            new int[] { 103, 108, 0, 360 },
            new int[] { 109, 114, 0, 100000 },
            new int[] { 119, 128, 0, 100000 },
            new int[] { 129, 134, 0, 360 },
            new int[] { 135, 140, 0, 100000 },
            new int[] { 147, 156, 0, 100000 },
            new int[] { 157, 162, 0, 360 },
            new int[] { 163, 168, 0, 100000 },
            new int[] { 170, 175, 0, 100000 },
        };
        // { columns }
        public static readonly int[][] HIT_SEQ_INDEXES_24 =
        {
            new int[] { 29, 73 },
            new int[] { 28, 72 }
        };
        // { sequences }
        public static readonly double[][] HIT_SEQ_SEQUENCE_24 =
        {
            new double[]
            {
                100, 10, 1, 0.1, 0.01,
                80, 8, 0.8, 0.08, 0.008,
                63, 6.3, 0.63, 0.063,
                50, 5, 0.5, 0.05,
                40, 4, 0.4, 0.04,
                32, 3.2, 0.32, 0.032,
                25, 2.5, 0.25, 0.025,
                20, 2, 0.2, 0.02,
                16, 1.6, 0.16, 0.016,
                12.5, 1.25, 0.125, 0.012
            },
            new double[] { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
        };
        // { minIndex }
        public static readonly int[] MIN_INDEXES_25 =
        {
            5,   7,   9,   11,  13,  15,  17,  19,  21,  23,  25,
            49,  51,  53,  55,  57,  59,  61,  63,  65,  67,  69,
            93 , 95,  97,  99,  101, 103, 105, 107, 109, 111, 113,
            119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139,
            147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167
        };
    }
}
